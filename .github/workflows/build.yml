name: Build coreboot for the POWER9 Talos II target
on:
  push:
    branches:
      - raptor-cs_talos-2/develop
      - raptor-cs_talos-2/release
  pull_request:
    branches:
      - raptor-cs_talos-2/develop
      - raptor-cs_talos-2/release
    tags:
      - 'talos_2_support_payload*'

jobs:
  build:
    runs-on: [self-hosted, builder]
    steps:

    # go modules are read only
    # https://github.com/golang/go/issues/35615
    - name: Allow for removal of go modules
      run: |
        chmod u+w -R $GITHUB_WORKSPACE/go
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        # Checkout pull request HEAD commit instead of merge commit
        # See: https://github.com/actions/checkout#checkout-pull-request-head-commit-instead-of-merge-commit
        ref: ${{ github.event.pull_request.head.sha }}
        # Fetch complete history
        fetch-depth: 0

    - name: Checkout all submodules
      run: git submodule update --init --recursive --checkout

    - name: Build information
      run: |
        date
        id -u
        git --version
        git rev-parse --verify HEAD
        git log -n 1
        git log --graph --decorate --pretty=oneline --abbrev-commit -n 20

    # Run build for just one random x86 mainboard so we can finish the build on
    # public runnner. Building all of them takes 4+ hours and we run out of
    # space. This already should give us some idea if we break something in
    # common code.
    - name: Run upstream coreboot tests (for one mainboard)
      run: |
        docker run -v $GITHUB_WORKSPACE:/home/coreboot:rw -i --rm \
          --workdir=/home/coreboot -u$(id -u):$(id -g) 3mdeb/coreboot-sdk:mkimage << EOF
        make -j $(nproc) what-jenkins-does JENKINS_ABUILD_OPT="-t intel/glkrvp"
        EOF

    - name: Build Talos II target (bootblock in PNOR)
      run: |
        docker run -v $GITHUB_WORKSPACE:/home/coreboot:rw -i --rm \
          --workdir=/home/coreboot -u$(id -u):$(id -g) 3mdeb/coreboot-sdk:mkimage << EOF
        cp configs/config.raptor-cs-talos-2 .config
        make olddefconfig
        make -j $(nproc)
        EOF

    - name: Save Talos II artifacts
      uses: actions/upload-artifact@v2
      with:
        name: coreboot-binary
        path: |
          build/coreboot.rom
          build/coreboot.rom.signed.ecc
          build/bootblock.signed.ecc
        retention-days: 7

    - name: Build Talos II target (bootblock in SEEPROM)
      run: |
        docker run -v $GITHUB_WORKSPACE:/home/coreboot:rw -i --rm \
          --workdir=/home/coreboot -u$(id -u):$(id -g) 3mdeb/coreboot-sdk:mkimage << EOF
        make clean
        cp configs/config.raptor-cs-talos-2-bootblock-in-seeprom .config
        make olddefconfig
        make -j $(nproc)
        EOF

  build-freebsd:
    runs-on: macos-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        # Checkout pull request HEAD commit instead of merge commit
        # See: https://github.com/actions/checkout#checkout-pull-request-head-commit-instead-of-merge-commit
        ref: ${{ github.event.pull_request.head.sha }}
        # Fetch complete history
        fetch-depth: 0
    - name: Checkout all submodules
      run: git submodule update --init --recursive --checkout

    - name: Build some tools in FreeBSD VM
      id: test
      uses: vmactions/freebsd-vm@v0.1.4
      with:
        usesh: true
        mem: 2048
        prepare: |
          pkg install -y git gmake gcc pciutils openssl pkgconf bash
        run: |
          gmake -C util/amdfwtool
          gmake -C util/cbmem
          gmake -C util/futility
          gmake -C util/inteltool
          gmake -C util/intelvbttool
          gmake -C util/nvramtool
          gmake -C util/superiotool
          gmake -C util/ifdtool
          gmake -C util/cbfstool

  run-on-hw:
    runs-on: [self-hosted, builder]
    needs: build
    timeout-minutes: 2880 # 2 days
    steps:

    # valid time 0-21600

    # This job is supposed to run only at night time
    # Because scheduling an event works only for default branch
    # we'll delay it manually here
    - name: Delay until night
      run: |
        NOW=$(date -d "1970-01-01 UTC $(date +%T)" +%s)
        if [ ${NOW} -lt ${DELAY_UNTIL} ] && [ ${NOW} -gt ${LATEST_EXECUTION_START} ]
        then
          let DELAY=${DELAY_UNTIL}-$(date -d "1970-01-01 UTC $(date +%T)" +%s)
          echo "Execution of this step is delayed until night, for ${DELAY} seconds"
          sleep ${DELAY}s
        fi
      env:
        # time of day in seconds
        DELAY_UNTIL: 86400 # 12:00 AM UTC - midnight
        LATEST_EXECUTION_START: 14400 # 4:00 AM UTC

    - uses: actions/download-artifact@v2
      with:
        name: coreboot-binary

    - name: Move coreboot binaries to build directory
      run: |
        mkdir -p build
        mv bootblock.signed.ecc coreboot.rom.signed.ecc build/

    - name: Generate ssh config
      run: |
        mkdir -p ~/.ssh
        cat << EOF > ~/.ssh/config
        Host *
          StrictHostKeyChecking no
        EOF
        chmod 700 ~/.ssh
        chmod 600 ~/.ssh/config

    - name: Test coreboot on Talos II
      run: |
        eval $(ssh-agent -s)
        echo "${TALOS_KEY}" | ssh-add -

        .github/flash_talos.sh ${TALOS_USER}@${TALOS_IP}

        echo "Start logging the boot process"
        rm -f ${LOG_FILE}
        ssh ${TALOS_USER}@${TALOS_IP} 'obmc-console-client < /dev/zero' | tee ${LOG_FILE} &

        echo "Sleeping for ${WAIT_SECONDS} seconds"
        sleep ${WAIT_SECONDS}s

        echo "Stop logging the boot process"
        kill %1

        echo "Power off Talos II"
        ssh ${TALOS_USER}@${TALOS_IP} 'obmcutil poweroff'

        echo Check if booting was successful
        grep "${BOOT_SUCESSFUL_LOG}" ${LOG_FILE}
      env:
        LOG_FILE: booting.log
        BOOT_SUCESSFUL_LOG: Jumping to boot code at 0x00000010
        WAIT_SECONDS: 60
        TALOS_USER: ${{ secrets.TALOS_USERNAME }}
        TALOS_IP: ${{ secrets.TALOS_IP }}
        TALOS_KEY: ${{ secrets.TALOS_KEY }}
