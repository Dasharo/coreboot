name: Reusable Deploy workflow
on:
  workflow_call:
    inputs:
      platform:
        type: string
      vendor:
        type: string
        required: false
      model:
        type: string
        required: false
      payload:
        type: string
        required: false
      type:
        type: string
        required: false

jobs:
  deploy:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up tag name
        id: tag_name
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"

      - name: Parse directories
        id: parse_directories
        run: |

          tag=${{ steps.tag_name.outputs.tag }}
          # Extract platform model string (everything before the last underscore in the tag)
          model=$(echo "$tag" | awk -F'_' '{OFS="_"; $(NF)=""; print $0}' | sed 's/_$//')
          # Extract version string (everything after the last underscore in the tag)
          release=$(echo "$tag" | awk -F'_' '{print $NF}')

          # Use 3mdeb directory for community / DPP releases
          case "${{ inputs.platform }}" in
            msi|hardkernel)
              base_dir="3mdeb"
              ;;
            *)
              # by default, use platform vendor name as a directory
              base_dir="${{ inputs.platform }}"
              ;;
          esac

          echo "base_dir=$base_dir" >> "$GITHUB_OUTPUT"
          echo "model=$model" >> "$GITHUB_OUTPUT"
          echo "release=$release" >> "$GITHUB_OUTPUT"

      - name: Parse artifact name
        id: artifact_name
        run: |
          if [ "${{ inputs.platform }}" == "protectli" ]; then
            echo "artifact_name=dasharo-${{ inputs.vendor }}-${{ inputs.model }}" >> "$GITHUB_OUTPUT"
          elif [ "${{ inputs.platform }}" == "novacustom" ]; then
            first_part=$(echo ${{ steps.tag_name.outputs.tag }} | cut -d "_" -f1)
            second_part=$(echo ${{ steps.tag_name.outputs.tag }} | cut -d "_" -f2-3)
            echo "artifact_name=dasharo-$first_part-$second_part" >> "$GITHUB_OUTPUT"
          elif [ "${{ inputs.platform }}" == "pcengines" ]; then
            echo "artifact_name=dasharo-${{ inputs.vendor }}-${{ inputs.model }}-${{ inputs.payload }}" >> "$GITHUB_OUTPUT"
          elif [ "${{ inputs.platform }}" == "msi" ]; then
            first_part=$(echo ${{ steps.tag_name.outputs.tag }} | cut -d "_" -f1)
            second_part=$(echo ${{ steps.tag_name.outputs.tag }} | cut -d "_" -f2)
            echo "artifact_name=dasharo-$first_part-${second_part}_${{ inputs.type }}" >> "$GITHUB_OUTPUT"
          elif  [ "${{ inputs.platform }}" == "hardkernel" ]; then
            echo "artifact_name=dasharo-${{ inputs.vendor }}-${{ inputs.model }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Download workflow artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ steps.artifact_name.outputs.artifact_name }}
          path: "./artifacts"

      - name: Upload to Nextcloud
        run: |
          BASE_URL="https://cloud.3mdeb.com/public.php/webdav"
          url_part=$(echo "${{ secrets.CLOUD_URL }}" | cut -d'/' -f6)
          base_dir="${{ steps.parse_directories.outputs.base_dir }}"
          model="${{ steps.parse_directories.outputs.model }}"
          release="${{ steps.parse_directories.outputs.release }}"
          CURL_CMD="curl -u $url_part:${{ secrets.CLOUD_PASSWORD }}"

          if [ "${{ inputs.platform }}" == "protectli" ]; then
            new_name=$(echo "${{ inputs.vendor }}-${{ inputs.model }}-${release}.rom" | sed 's/-/_/g; s/.*/\L&/')
          elif [ "${{ inputs.platform }}" == "novacustom" ]; then
            new_name=$(echo "${model}_${release}.rom" | sed 's/-/_/g; s/.*/\L&/')
          elif [ "${{ inputs.platform }}" == "pcengines" ]; then
            new_name=$(echo "${{ inputs.vendor }}_${{ inputs.model }}_${{ inputs.payload }}_${release}.rom" | sed 's/.*/\L&/')
          elif [ "${{ inputs.platform }}" == "msi" ]; then
            new_name=$(echo "${model}_${{ inputs.type }}_${release}.rom" | sed 's/-/_/g; s/.*/\L&/')
          elif [ "${{ inputs.platform }}" == "hardkernel" ]; then
            new_name=$(echo "${{ inputs.vendor }}-${{ inputs.model }}_${release}.rom" | sed 's/-/_/g; s/.*/\L&/')
          fi

          # Create release directory if it doesn't exist
          $CURL_CMD -X MKCOL "$BASE_URL/$base_dir"
          $CURL_CMD -X MKCOL "$BASE_URL/$base_dir/$model"
          $CURL_CMD -X MKCOL "$BASE_URL/$base_dir/$model/$release"

          # upload firmware and hash files
          $CURL_CMD -X PUT -T "artifacts/coreboot.rom" "$BASE_URL/$base_dir/$model/$release/$new_name"
          sha256sum artifacts/coreboot.rom > ${new_name}.sha256
          $CURL_CMD -X PUT -T "${new_name}.sha256" "$BASE_URL/$base_dir/$model/$release/"
